#include <iostream>
#include <string.h>
using namespace std;

// clase, modificatori de acces, constructori, destructor,const, static,firend,setteri,getteri,operator =

class Student
{


private:
    const int Id_Matricol;
    int varsta;
    char* nume;
    int nrNote;
    int* note;


public:
    static int anCurent; //trebuie mereu initializat cu operator de access sau reolutie ::
    static void mesaj()
    {
        cout<<"Bine ati venit studenti de anul "<<anCurent; //in metode statice folosim doar atribute statice
    }

    Student():Id_Matricol(00000) //sintaxa pentru atribuirea unui const cu parametru
    {
        this->varsta = 0;
        this->nume=new char[strlen("Anonim")+1];//+1 pentru acel sfarsit de nume
        strcpy(this->nume,"Anonim");
    }

    Student(int id, int varsta, char* nume, int nrNote, int* note):Id_Matricol(id)
    {
        this->varsta = varsta; //primul varsta se refera la varsta al clasei in care ma aflu

        this->nume = new char[strlen("Anonim")+1];
        strcpy(this->nume,nume);

        this->nrNote = nrNote;

        this->note = new int[nrNote];
        for(int i = 0;i <= nrNote;i++)
        {
            this->note[i] = note[i];
        }

    }

    Student (int varsta):Id_Matricol(00)
    {
        this->varsta = varsta;
    }

    void afisare()
    {
        cout<<"Studentul "<<this->nume<<" are urmatoarele note: ";
        for(int i = 0 ; i < this->nrNote;i++)
        {
            cout<<this->note[i]<<" ";
        }
        cout<<"Media studentului este ";
    }

    char* getNume()
    {
        return this->nume;
    }

    int* getNote()
    {
        return this->note;
    }

    int getNrNote()
    {
        return this->nrNote;
    }

    int getVarsta()
    {
        return varsta;
    }

    void setVarst(int varsta)
    {
        this->varsta = varsta;
    }

    void setNume(char* nume)
    {
        if(this->nume != nullptr) //golim memoria mai intai
        {
            delete[] this->nume;
        }
        this->nume = new char[strlen(nume)+1];
        strcpy(this->nume,nume);
    }

    void setNote(int* note,int b)
    {
        if(this->note != nullptr)
        {
            delete[] this->note;
        }


        this->nrNote = b;
        this->note = new int[b];
        for(int i = 0;i <= b;i++)
        {
            this->note[i] = note[i];
        }

    }

    float medieStudent()
    {
        float suma = 0;
        for(int i=0; i<= nrNote;i++)
        {
            suma += note[i];
        }
        suma = suma/nrNote;
        return suma;
    }

    ~Student()
    {
        if(this->note != nullptr) //daca in adresa exista ceva
        {
            delete[] this->note;
        }
        if(this->nume != nullptr) //in destructor se sterg doar zonele alocate dinamic, fara ele,nu avem ce sterge
        {
            delete[] this->nume;
        }
    }

};

int Student :: anCurent = 2;

int main()
{
    /*
    cout<<Student::anCurent;
    Student::mesaj();
    */
    Student s;

    char nume[] = {"POO"};
    int note[]={5,6,7,8};
    char nume2[] = {"Andrei"};

    Student s2(1,3,nume,4,note);
    s2.afisare();


    Student s3(10);

    cout<<s2.getNume()<<"\n";
    cout<<s2.getNote()<<"\n";
    int* notu = s2.getNote();
    cout<<*(notu+1)<<endl;
    cout<<s2.getVarsta()<<endl;
    s2.setVarst(2);
    cout<<s2.getVarsta();
    s2.setNume(nume2);
    cout<<endl;
    cout<<s2.getNume();
    int note2[] = {6,7,8,9};
    s2.setNote(note2,4);
    cout<<endl;
    s2.afisare();
    float medie = s2.medieStudent();
    cout<<medie;

    return 0;
}
